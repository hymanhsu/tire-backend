-- This file is used to initialize the tables for the project Tire
-----------------------------------Part 1 : User&Role-------------------------------------


-- customers
DROP TABLE IF EXISTS c_customers;

CREATE TABLE c_customers (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    nick_name VARCHAR(100),
    -- nick name 
    phone_number VARCHAR(20) UNIQUE,
    -- phone number (can be used to login)
    email VARCHAR(100) UNIQUE,
    -- email (can be used to login)
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- login authentication of customers
DROP TABLE IF EXISTS c_auths;

CREATE TABLE c_auths (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    user_id CHAR(21),
    -- the user who logined in 
    login_name VARCHAR(100) UNIQUE,
    -- login name (can be used to login)
    auth_pass VARCHAR(32),
    -- md5 string of readable password
    session_ttl INTEGER,
    -- how long user can live after logining in, unit is hour
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- login sessions of customers
DROP TABLE IF EXISTS c_login_sessions;

CREATE TABLE c_login_sessions (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    -- this field would be written into JWT token, which are used to control the validation of tickets
    user_id CHAR(21),
    -- the user who have logined in 
    user_agent VARCHAR(256),
    -- User-Agent from the brower, which would be used to anylyse customers
    session_ttl INTEGER,
    -- how long user can live after logining in, unit is seconds
    renew_count INTEGER DEFAULT 0,
    -- the times that user renew his token
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);


-- users (administrators, owners, managers, staff)
DROP TABLE IF EXISTS u_users;

CREATE TABLE u_users (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    nick_name VARCHAR(100),
    -- nick name 
    address VARCHAR(200),
    -- address, including street, zip code 
    phone_number VARCHAR(20) UNIQUE,
    -- phone number (can be used to login)
    email VARCHAR(100) UNIQUE,
    -- email (can be used to login)
    photo_url VARCHAR(200),
    -- photo url
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- user's basic roles
DROP TABLE IF EXISTS u_base_roles;

CREATE TABLE u_base_roles (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    user_id CHAR(21) NOT NULL,
    -- user id 
    role CHAR(4) NOT NULL,
    -- role (root,admin)
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- login authentication of users
DROP TABLE IF EXISTS u_auths;

CREATE TABLE u_auths (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    user_id CHAR(21),
    -- the user who logined in 
    login_name VARCHAR(100) UNIQUE,
    -- login name (can be used to login)
    auth_pass VARCHAR(32),
    -- md5 string of readable password
    session_ttl INTEGER,
    -- how long user can live after logining in, unit is hour
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- login sessions by JWT
-- login session will be stored in the client as a token (cookie or local storage)
DROP TABLE IF EXISTS u_login_sessions;

CREATE TABLE u_login_sessions (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    -- this field would be written into JWT token, which are used to control the validation of tickets
    user_id CHAR(21),
    -- the user who have logined in 
    user_agent VARCHAR(256),
    -- User-Agent from the brower, which would be used to anylyse customers
    session_ttl INTEGER,
    -- how long user can live after logining in, unit is seconds
    renew_count INTEGER DEFAULT 0,
    -- the times that user renew his token
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- merchants (because the platform contains many merchants that own many workshops)
DROP TABLE IF EXISTS merchants;

CREATE TABLE merchants (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    nation VARCHAR(100),
    -- the nation , ref : https://en.wikipedia.org/wiki/List_of_postal_codes, such as Canada is 'CA'
    province  VARCHAR(100),
    -- the states/provinces in the nation
    city VARCHAR(100),
    -- the cities in the states/provinces
    merchant_sn VARCHAR(100),
    -- the sequence number of the merchant
    merchant_name VARCHAR(100),
    -- merchant name
    introduction VARCHAR(500),
    -- introduction
    website_url VARCHAR(200),
    -- website of the merchant
    address VARCHAR(200),
    -- address, including street, zip code and geographical coordinates etc
    phone_number VARCHAR(20),
    -- phone number
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- workshops of merchant
DROP TABLE IF EXISTS merchant_workshops;

CREATE TABLE merchant_workshops (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    merchant_id CHAR(21),
    -- merchant id
    workshop_sn VARCHAR(100),
    -- the sequence number of the workshop
    workshop_name VARCHAR(100),
    -- workshop name
    introduction VARCHAR(200) DEFAULT '',
    -- introduction 
    address VARCHAR(200) DEFAULT '',
    -- address, including street, zip code and geographical coordinates etc
    phone_number VARCHAR(20) DEFAULT '',
    -- phone number
    latitude VARCHAR(50),
    -- latitude (for google map) , using string to meet different precision
    longitude VARCHAR(50),
    -- longtitude (for google map), using string to meet different precision
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- relation between merchant and members (including owner, manager, staff)
DROP TABLE IF EXISTS merchant_members;

CREATE TABLE merchant_members (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    user_id CHAR(21) NOT NULL,
    -- user id 
    role CHAR(4) NOT NULL,
    -- role
    merchant_id CHAR(21) NOT NULL,
    -- merchant id 
    workshop_id CHAR(21),
    -- workshop id 
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);




-----------------------------------Part 2 : Product-------------------------------------
-- categories of all products
DROP TABLE IF EXISTS p_categories;

CREATE TABLE p_categories (
    id CHAR(3) PRIMARY KEY,
    -- id, by nano
    parent_category_id CHAR(3),
    -- parent category id
    level INTEGER DEFAULT 1,
    -- level : 1, 2, 3
    priority INTEGER DEFAULT 0,
    -- priority value : 0, 1000, 2000, ...
    title VARCHAR(50),
    -- title
    introduction VARCHAR(200),
    -- introduction
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- brands of products (including tires)
DROP TABLE IF EXISTS p_brands;

CREATE TABLE p_brands (
    id CHAR(5) PRIMARY KEY,
    -- id, by nano
    brand VARCHAR(50) NOT NULL,
    -- name of maker, such as Michelin
    grade INTEGER DEFAULT 1,
    -- 1: Premium, 2: Mid-range, 3: Economy, 4: Budget
    holder VARCHAR(100),
    -- the company that owns the brand
    introduction VARCHAR(200),
    -- introduction of the brand
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);


-- templates of attributes
DROP TABLE IF EXISTS p_attr_templates;

CREATE TABLE p_attr_templates (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    merchant_id CHAR(21) NOT NULL,
    -- merchant id
    template_name VARCHAR(100) NOT NULL,
    -- template name
    template_type VARCHAR(6) NOT NULL,
    -- template type : SPU | SKU
    description VARCHAR(500),
    -- description
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- defines of attribute templates
DROP TABLE IF EXISTS p_attr_template_details;

CREATE TABLE p_attr_template_details (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    attr_templ_id CHAR(21) NOT NULL,
    -- attr template id
    attr_name VARCHAR(20),
    -- attr name
    attr_type VARCHAR(20),
    -- attr type : STRING | NUMBER | IMAGES | VIDEO | RICHTEXT
    param_name VARCHAR(50),
    -- parameter name
    title VARCHAR(50),
    -- title
    description VARCHAR(80),
    -- description
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

DROP INDEX IF EXISTS UNIQUE_ATTR_TEMPLATE_DETAILS;
CREATE UNIQUE INDEX UNIQUE_ATTR_TEMPLATE_DETAILS ON p_attr_template_details (attr_templ_id, attr_name);

-- SPU defines of products
DROP TABLE IF EXISTS p_products;

CREATE TABLE p_products (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    merchant_id CHAR(21) NOT NULL,
    -- merchant id
    spu_name VARCHAR(60) NOT NULL,
    -- SPU name
    category_id CHAR(3) NOT NULL,
    -- category id
    brand_id CHAR(5) NOT NULL,
    -- brand id
    attr_templ_id CHAR(21) NOT NULL,
    -- attr template id
    status VARCHAR(20) DEFAULT 'INITIAL',
    -- status : INITIAL | ONLINE | OFFLINE
    title VARCHAR(100),
    -- description
    description VARCHAR(500),
    -- description
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);


-- attributes of SPU
-- using horizontal fields table to improve the performance of searching
-- our codes would define different meaning for every attr_xx fields
DROP TABLE IF EXISTS p_product_attrs;

CREATE TABLE p_product_attrs (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    product_id CHAR(21) NOT NULL,
    -- product id 
    attr_short_01 VARCHAR(30),
    attr_short_02 VARCHAR(30),
    attr_short_03 VARCHAR(30),
    attr_short_04 VARCHAR(30),
    attr_short_05 VARCHAR(30),
    attr_short_06 VARCHAR(30),
    attr_short_07 VARCHAR(30),
    attr_short_08 VARCHAR(30),
    attr_short_09 VARCHAR(30),
    attr_short_10 VARCHAR(30),
    attr_short_11 VARCHAR(30),
    attr_short_12 VARCHAR(30),
    attr_short_13 VARCHAR(30),
    attr_short_14 VARCHAR(30),
    attr_short_15 VARCHAR(30),
    attr_short_16 VARCHAR(30),
    attr_short_17 VARCHAR(30),
    attr_short_18 VARCHAR(30),
    attr_short_19 VARCHAR(30),
    attr_short_20 VARCHAR(30),
    -- attr fields, short length
    attr_medium_01 VARCHAR(100),
    attr_medium_02 VARCHAR(100),
    attr_medium_03 VARCHAR(100),
    attr_medium_04 VARCHAR(100),
    attr_medium_05 VARCHAR(100),
    attr_medium_06 VARCHAR(100),
    attr_medium_07 VARCHAR(100),
    attr_medium_08 VARCHAR(100),
    attr_medium_09 VARCHAR(100),
    attr_medium_10 VARCHAR(100),
    -- attr fields, medium length
    attr_long_01 VARCHAR(500),
    attr_long_02 VARCHAR(500),
    attr_long_03 VARCHAR(500),
    attr_long_04 VARCHAR(500),
    attr_long_05 VARCHAR(500),
    -- attr fiedls, long length
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);


-----------------------------------Part 3 : Inventory-------------------------------------
-- providers of products
DROP TABLE IF EXISTS p_providers;

CREATE TABLE p_providers (
    id CHAR(4) PRIMARY KEY,
    -- id, by nano
    title VARCHAR(50) NOT NULL,
    -- title
    introduction VARCHAR(200) DEFAULT '',
    -- introduction
    grade CHAR(1) DEFAULT '1',
    -- provider's grade 
    -- 1 : manufactuer,  2 : First-class dealer,  
    -- 3|4 : Second-class dealer, 5|6|7|8|9: Third-class dealer
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- SKU defines of products
-- ref : https://en.wikipedia.org/wiki/Stock_keeping_unit)
DROP TABLE IF EXISTS p_product_skus;

CREATE TABLE p_product_skus (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    merchant_id CHAR(10) NOT NULL,
    -- merchant id 
    product_id CHAR(21) NOT NULL,
    -- product id (foreign key)
    provider_id CHAR(4) NOT NULL,
    -- provider id
    attr_templ_id CHAR(21) NOT NULL,
    -- attr template id
    -- barcode VARCHAR(100),
    -- barcode, defined by manufacture
    -- ref : https://en.wikipedia.org/wiki/Universal_Product_Code
    title VARCHAR(100),
    -- title
    subtitle VARCHAR(100),
    -- subtitle
    description VARCHAR(500),
    -- description
    old_unit_price NUMERIC(8, 2) DEFAULT 0.00,
    -- old price
    unit_price NUMERIC(8, 2) DEFAULT 0.00,
    -- price
    stock_amount INTEGER DEFAULT 0,
    -- the amount in the stock
    update_version INTEGER,
    -- increase 'update_version' value when update 'stock_amount'
    status VARCHAR(20) DEFAULT 'INITIAL',
    -- INITIAL : initial , ONLINE : online,  OFFLINE : offline
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- attributes of SKU
-- using horizontal fields table to improve the performance of searching
DROP TABLE IF EXISTS p_product_sku_attrs;

CREATE TABLE p_product_sku_attrs (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    product_sku_id CHAR(21) NOT NULL,
    -- product sku id 
    attr_short_01 VARCHAR(30),
    attr_short_02 VARCHAR(30),
    attr_short_03 VARCHAR(30),
    attr_short_04 VARCHAR(30),
    attr_short_05 VARCHAR(30),
    attr_short_06 VARCHAR(30),
    attr_short_07 VARCHAR(30),
    attr_short_08 VARCHAR(30),
    attr_short_09 VARCHAR(30),
    attr_short_10 VARCHAR(30),
    -- attr fields, short length
    attr_medium_01 VARCHAR(100),
    attr_medium_02 VARCHAR(100),
    attr_medium_03 VARCHAR(100),
    attr_medium_04 VARCHAR(100),
    attr_medium_05 VARCHAR(100),
    -- attr fields, medium length
    attr_long_01 VARCHAR(500),
    attr_long_02 VARCHAR(500),
    attr_long_03 VARCHAR(500),
    -- attr fiedls, long length
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- the records of loading stock
DROP TABLE IF EXISTS p_stock_loads;

CREATE TABLE p_stock_loads (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    merchant_id CHAR(10) NOT NULL,
    -- merchant id 
    product_id CHAR(21) NOT NULL,
    -- product id 
    product_sku_id CHAR(21) NOT NULL,
    -- product sku id 
    provider_id CHAR(4) NOT NULL,
    -- provider id
    orientation CHAR(3),
    -- orientation of operation 
    -- INC : increase stock, DEC : decrease stock
    amount INTEGER,
    -- the amount of loading/unloading
    unit_price NUMERIC(8, 2),
    -- price
    operator CHAR(21),
    -- user id of operator (staff or manager)
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- the stock change flow records of orders
-- create it after making order, lock stock at most 30 mins
DROP TABLE IF EXISTS p_stock_order_flows;

CREATE TABLE p_stock_order_flows (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    merchant_id CHAR(10) NOT NULL,
    -- merchant id 
    order_id CHAR(21) NOT NULL,
    -- order id
    product_sku_id CHAR(21) NOT NULL,
    -- product sku id 
    subtracted_amount INTEGER,
    -- the amount of buying
    exp_at TIMESTAMPTZ,
    -- the time of expiration, normarl is 30 mins
    -- if expire, need to put the stock back
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- DROP INDEX IF EXISTS UNIQUE_STOCK_ORDER_FLOW;
-- CREATE UNIQUE INDEX UNIQUE_STOCK_ORDER_FLOW ON p_stock_order_flows (product_sku_id, order_id);

-- the stock change flow records of refunded orders
-- create it after making refund
DROP TABLE IF EXISTS p_stock_refund_flows;

CREATE TABLE p_stock_refund_flows (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    merchant_id CHAR(10) NOT NULL,
    -- merchant id 
    refund_order_id CHAR(21) NOT NULL,
    -- refund order id
    product_sku_id CHAR(21) NOT NULL,
    -- product sku id 
    added_amount INTEGER,
    -- the amount of refund
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);


-----------------------------------Part 4 : Promotion-------------------------------------
-- coupons
DROP TABLE IF EXISTS coupons;

CREATE TABLE coupons (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    type CHAR(1),
    -- type of coupon
    -- C : equals cash ,  D : discount 
    title VARCHAR(100),
    -- title of the coupon
    introduction VARCHAR(100),
    -- introduction of the coupon
    strategy VARCHAR(30),
    -- strategy of applying coupon, which decide what the codes should do
    init_parameters JSONB,
    -- the inited parameters of the coupon
    coupon_amount INTEGER DEFAULT -1,
    -- the amount of coupons, -1 means unlimited
    update_version INTEGER,
    -- increase 'update_version' value when update 'coupon_amount'
    exp_at TIMESTAMPTZ,
    -- the time of expiration
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- coupons of customers
DROP TABLE IF EXISTS customer_coupons;

CREATE TABLE customer_coupons (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    type CHAR(1),
    -- type of coupon
    -- C : cash ,  D : discount 
    title VARCHAR(100),
    -- title of the coupon
    introduction VARCHAR(500),
    -- introduction of the coupon
    strategy VARCHAR(30),
    -- strategy of applying coupon, which decide what the codes should do
    init_parameters JSONB,
    -- the inited parameters of the coupon
    exp_at TIMESTAMPTZ,
    -- the time of expiration
    order_id CHAR(21) DEFAULT '',
    -- order id, '' means this coupon is not under an order
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-----------------------------------Part 5 : Shopping Cart&Order-------------------------------------
-- address of customers who receive goods
DROP TABLE IF EXISTS delivery_addresses;

CREATE TABLE delivery_addresses (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    user_id CHAR(21),
    -- the user who have logined in 
    address VARCHAR(200),
    -- address, including street, zip code
    phone_number VARCHAR(20),
    -- phone number 
    recipient VARCHAR(50),
    -- recipient
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- shopping cart
-- shopping items of customer
-- NOTE : when customer put items into his shopping cart, 
-- we would automatically merge ordere shopping items (order_id=='') by sku 
DROP TABLE IF EXISTS shopping_items;

CREATE TABLE shopping_items (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    product_sku_id CHAR(21),
    -- product sku id (foreign key)
    shopping_amount INTEGER,
    -- the amount that customer bought
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- orders
DROP TABLE IF EXISTS orders;

CREATE TABLE orders (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    nick_name VARCHAR(100) NOT NULL,
    -- nick name 
    phone_number VARCHAR(20),
    -- phone number 
    email VARCHAR(100),
    -- email 
    merchant_workshop_id CHAR(14),
    -- merchant's workshop which was choosen by customer
    items_price NUMERIC(8, 2),
    -- total price for items
    gst_fee NUMERIC(8, 2),
    -- the fee for tax GST, Goods and Services Tax
    pst_fee NUMERIC(8, 2),
    -- the fee for tax PST, Provincial Tax
    hst_fee NUMERIC(8, 2),
    -- the fee for tax HST, Harmonized Sales Tax
    delivery_fee NUMERIC(8, 2),
    -- the fee for delivery
    discounted_price NUMERIC(8, 2),
    -- the money which need to be removed from the total price
    actual_price NUMERIC(8, 2),
    -- actual price (after applying coupons)
    status VARCHAR(20) DEFAULT 'TO_PAY',
    -- status 
    -- TO_PAY : need to pay
    -- CANCELLED : cancelled
    -- PAID : been paid 
    -- REFUNDING : been under refunding
    -- RECEIVED : wait for the delivery
    -- TO_REVIEW : need to review
    -- COMPLETED : order is completed
    -- CLOSED : closed by the staff (REFUNDING -> CLOSED)
    previous_status VARCHAR(20) DEFAULT '',
    -- previous status
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- order items
DROP TABLE IF EXISTS order_items;

CREATE TABLE order_items (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    product_sku_id CHAR(21),
    -- product sku id (foreign key)
    buy_amount INTEGER,
    -- the amount that customer buy
    unit_price NUMERIC(8, 2),
    -- unit price which been locked
    -- NOTE : when customer make an order, 
    -- he/she also lock the price of product. 
    order_id CHAR(21) DEFAULT '',
    -- order id
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- shipping packages of an order
-- you can query shipping_items to get items of this shipping package
-- NOTE : one order be able to be splitted into many delivery packages
DROP TABLE IF EXISTS order_shippings;

CREATE TABLE order_shippings (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id 
    order_id CHAR(21),
    -- order id 
    shipping_method VARCHAR(20) DEFAULT 'PICKUP',
    -- shipping method : PICKUP | DELIVERY
    pickup_address VARCHAR(200),
    -- pickup address
    delivery_address VARCHAR(200),
    -- address, including street, zip code
    phone_number VARCHAR(20),
    -- phone number 
    recipient VARCHAR(50),
    -- recipient
    status VARCHAR(20) DEFAULT 'TO_DELIVERY',
    -- status 
    -- TO_DELIVERY : need to delivery
    -- DELIVERING : been under delivering
    -- RECEIVED : have received
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- shipping items
DROP TABLE IF EXISTS order_shipping_items;

CREATE TABLE order_shipping_items (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    product_sku_id CHAR(21),
    -- product sku id (foreign key)
    shipping_amount INTEGER,
    -- the amount that been delivered together
    order_id CHAR(21) DEFAULT '',
    -- order id
    order_shipping_id CHAR(21) DEFAULT '',
    -- order shipping id
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- refund orders
-- customer can refund **ONLY ONCE** with one order
DROP TABLE IF EXISTS refund_orders;

CREATE TABLE refund_orders (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    order_id CHAR(21),
    -- order id which need refund (maybe partially refund)
    updated_items_price NUMERIC(8, 2),
    -- total price for items (updated)
    updated_gst_fee NUMERIC(8, 2),
    -- the fee for tax GST, Goods and Services Tax (updated)
    updated_pst_fee NUMERIC(8, 2),
    -- the fee for tax PST, Provincial Tax (updated)
    updated_hst_fee NUMERIC(8, 2),
    -- the fee for tax HST, Harmonized Sales Tax (updated)
    updated_delivery_fee NUMERIC(8, 2),
    -- the fee for delivery 
    -- (if the customer get free-delivery service but he refund 
    -- all goods, so he have to pay us the delivery fee)
    updated_discounted_price NUMERIC(8, 2),
    -- the money which need to be removed from the total price
    updated_actual_price NUMERIC(8, 2),
    -- actual price (after applying coupons) (updated)
    refunded_money NUMERIC(8, 2),
    -- the money which should refund to customer
    -- if the value is negtive, customer need charge some money
    status VARCHAR(20) DEFAULT 'TO_REFUND',
    -- status 
    -- TO_REFUND : to handle
    -- CANCELLED : cancelled
    -- HANDLING : under handling
    -- REJECTED : be rejected
    -- REFUNDING : under refunding
    -- CLOSED : closed by the staff 
    previous_status VARCHAR(20) DEFAULT '',
    -- previous status
    processor CHAR(21),
    -- staff who handle this refund
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- refund order items
DROP TABLE IF EXISTS refund_order_items;

CREATE TABLE refund_order_items (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    product_sku_id CHAR(21),
    -- product sku id (foreign key)
    refund_amount INTEGER,
    -- the amount that customer refund
    refund_order_id CHAR(21) DEFAULT '',
    -- refund order id
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- shipping packages of an refund order
-- you can query refund_shipping_items to get items of this shipping package
DROP TABLE IF EXISTS refund_order_shippings;

CREATE TABLE refund_order_shippings (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id 
    refund_order_id CHAR(21),
    -- refund order id 
    return_address VARCHAR(200),
    -- address, including street, zip code
    phone_number VARCHAR(20),
    -- phone number 
    recipient VARCHAR(50),
    -- recipient
    status VARCHAR(20) DEFAULT 'TO_DELIVERY',
    -- status 
    -- TO_DELIVERY : need to delivery
    -- DELIVERING : been under delivering
    -- RECEIVED : have received
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- refund shipping items
DROP TABLE IF EXISTS refund_order_shipping_items;

CREATE TABLE refund_order_shipping_items (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    product_sku_id CHAR(21),
    -- product sku id (foreign key)
    ship_amount INTEGER,
    -- the amount that been delivered together
    refund_order_id CHAR(21) DEFAULT '',
    -- refund order id
    refund_order_shipping_id CHAR(21) DEFAULT '',
    -- refund order shipping id
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- reviews of order from customers
DROP TABLE IF EXISTS order_reviews;

CREATE TABLE order_reviews (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    order_id CHAR(21),
    -- order id which customer paid
    product_sku_id CHAR(21),
    -- product sku id which customer bought
    review_content VARCHAR(500),
    -- review content
    rating INTEGER,
    -- customer give the order a rating score, 
    -- range = [1,2,3,4,5], 5 is the best
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-----------------------------------Part 6 : Payment-------------------------------------
-- payment templates for merchant
DROP TABLE IF EXISTS payment_templates_merchant;

CREATE TABLE payment_templates_merchant (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    label VARCHAR(50),
    -- display label
    merchant_id CHAR(21),
    -- merchant id (foreign key)
    payment_way VARCHAR(50),
    -- the way of payment
    -- CREDIT, DEBIT, PAYPAL, APPALPAY, ALIPAY
    encryped_parameters VARCHAR(512),
    -- information needed by payment gateway,  format : hex string
    -- encryped with aes-256-cbc
    iv VARCHAR(125),
    -- initialization vector used by algirithm, format : hex string
    -- ref : https://en.wikipedia.org/wiki/Initialization_vector
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- payment templates for customers
DROP TABLE IF EXISTS payment_templates_customer;

CREATE TABLE payment_templates_customer (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    label VARCHAR(50),
    -- display label
    customer_id CHAR(21),
    -- customer id (foreign key)
    payment_way VARCHAR(50),
    -- the way of payment
    -- CREDIT, DEBIT, PAYPAL, APPALPAY, ALIPAY
    encryped_parameters VARCHAR(512),
    -- information needed by payment gateway,  format : hex string
    -- encryped with aes-256-cbc
    iv VARCHAR(125),
    -- initialization vector used by algirithm, format : hex string
    -- ref : https://en.wikipedia.org/wiki/Initialization_vector
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- payments of order
DROP TABLE IF EXISTS order_payments;

CREATE TABLE order_payments (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    order_id CHAR(21),
    -- order id
    customer_id CHAR(21),
    -- customer id 
    merchant_id CHAR(21),
    -- merchant id
    paid_money NUMERIC(8, 2),
    -- the money paid
    payment_template_id CHAR(21),
    -- payment template id
    status VARCHAR(20),
    -- status : SUCCESS | FAILED
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- payments of refunded orders
DROP TABLE IF EXISTS refund_payments;

CREATE TABLE refund_payments (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    refund_order_id CHAR(21),
    -- refund order id
    merchant_id CHAR(21),
    -- merchant id
    customer_id CHAR(21),
    -- customer id 
    refunded_money NUMERIC(8, 2),
    -- the money refunded
    refund_detail VARCHAR(1000),
    -- the detail of refund ,  JSON string
    -- conatains: refund method (cash, card 
    -- or coupon), bank transaction info, etc
    processor CHAR(21),
    -- staff who handle this refund payment
    status VARCHAR(20),
    -- status : SUCCESS | FAILED
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-----------------------------------Part 7 : Appointment&Installation-------------------------------------
-- appointment of installation
DROP TABLE IF EXISTS appointments;

CREATE TABLE appointments (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    order_id CHAR(21),
    -- order id
    workshop_address VARCHAR(200),
    -- the address of workshop which will help customer
    appointment_time TIMESTAMPTZ,
    -- the time of appointment
    processor CHAR(21),
    -- the staff who handle the appointment
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- records of installation
DROP TABLE IF EXISTS installations;

CREATE TABLE installations (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    order_id CHAR(21),
    -- order id
    appointment_id CHAR(21),
    -- appointment id
    detail_records VARCHAR(3000),
    -- details in the process of installation, JSON string  
    processor CHAR(21),
    -- the staff who handle the installation
    status VARCHAR(20),
    -- status : ACCEPED | PENDING | FINISHED
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);

-- review of installation from customers
DROP TABLE IF EXISTS service_reviews;

CREATE TABLE service_reviews (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    customer_id CHAR(21),
    -- customer id (foreign key)
    order_id CHAR(21),
    -- order id
    appointment_id CHAR(21),
    -- appointment id
    installation_id CHAR(21),
    -- installation id
    review VARCHAR(500),
    -- review
    rating INTEGER,
    -- customer give the order a rating score, 
    -- range = [1,2,3,4,5], 5 is the best
    processor CHAR(21),
    -- the staff who handle the installation
    status VARCHAR(20),
    -- status : ACCEPED | PENDING | FINISHED
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMPTZ DEFAULT now(),
    u_at TIMESTAMPTZ DEFAULT now()
);